{"version":3,"sources":["../src/transformers.js"],"names":["extractColumns","data","_","flatten","map","group","columns","extractRows","panel","model","rows","mapping","length","allHaveGrouping","every","dataset","grouping","nameRowCells","forEach","namedRows","row","rowIndex","assign","values","outputRow","excludeUngrouped","Object","keys","column","value","text","push","dataIndex","slice","output","create","cell","cellIndex","find","transformDataToTable","TableModel","transformer","transformers","transform","Error","moment","TimeSeries","timeseries_to_rows","description","getColumns","type","i","series","y","datapoints","dp","target","timeseries_to_columns","points","timeKey","toString","time","point","timeseries_aggregations","alias","getFlotPairs","cells","stats","annotations","evt","min","title","tags","table","undefined","index","groupings","json","names","maxDocs","Math","doc","flattened","propName","key","z","isObject","JSON","stringify"],"mappings":"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","file":"transformers.js","sourcesContent":["\nimport _ from 'lodash';\nimport moment from 'moment';\nimport flatten from 'app/core/utils/flatten';\nimport TimeSeries from 'app/core/time_series2';\nimport TableModel from 'app/core/table_model';\n\nvar transformers = {};\n\ntransformers.timeseries_to_rows = {\n  description: 'Time series to rows',\n  getColumns: function() {\n    return [];\n  },\n  transform: function(data, panel, model) {\n    model.columns = [\n      {text: 'Time', type: 'date'},\n      {text: 'Metric'},\n      {text: 'Value'},\n    ];\n\n    for (var i = 0; i < data.length; i++) {\n      var series = data[i];\n      for (var y = 0; y < series.datapoints.length; y++) {\n        var dp = series.datapoints[y];\n        model.rows.push([dp[1], series.target, dp[0]]);\n      }\n    }\n  },\n};\n\ntransformers.timeseries_to_columns = {\n  description: 'Time series to columns',\n  getColumns: function() {\n    return [];\n  },\n  transform: function(data, panel, model) {\n    model.columns.push({text: 'Time', type: 'date'});\n\n    // group by time\n    var points = {};\n\n    for (var i = 0; i < data.length; i++) {\n      var series = data[i];\n      model.columns.push({text: series.target});\n\n      for (var y = 0; y < series.datapoints.length; y++) {\n        var dp = series.datapoints[y];\n        var timeKey = dp[1].toString();\n\n        if (!points[timeKey]) {\n          points[timeKey] = {time: dp[1]};\n          points[timeKey][i] = dp[0];\n        } else {\n          points[timeKey][i] = dp[0];\n        }\n      }\n    }\n\n    for (var time in points) {\n      var point = points[time];\n      var values = [point.time];\n\n      for (let i = 0; i < data.length; i++) {\n        var value = point[i];\n        values.push(value);\n      }\n\n      model.rows.push(values);\n    }\n  }\n};\n\ntransformers.timeseries_aggregations = {\n  description: 'Time series aggregations',\n  getColumns: function() {\n    return [\n      {text: 'Avg', value: 'avg'},\n      {text: 'Min', value: 'min'},\n      {text: 'Max', value: 'max'},\n      {text: 'Total', value: 'total'},\n      {text: 'Current', value: 'current'},\n      {text: 'Count', value: 'count'},\n    ];\n  },\n  transform: function(data, panel, model) {\n    var i, y;\n    model.columns.push({text: 'Metric'});\n\n    if (panel.columns.length === 0) {\n      panel.columns.push({text: 'Avg', value: 'avg'});\n    }\n\n    for (i = 0; i < panel.columns.length; i++) {\n      model.columns.push({text: panel.columns[i].text});\n    }\n\n    for (i = 0; i < data.length; i++) {\n      var series = new TimeSeries({\n        datapoints: data[i].datapoints,\n        alias: data[i].target,\n      });\n\n      series.getFlotPairs('connected');\n      var cells = [series.alias];\n\n      for (y = 0; y < panel.columns.length; y++) {\n        cells.push(series.stats[panel.columns[y].value]);\n      }\n\n      model.rows.push(cells);\n    }\n  }\n};\n\ntransformers.annotations = {\n  description: 'Annotations',\n  getColumns: function() {\n    return [];\n  },\n  transform: function(data, panel, model) {\n    model.columns.push({text: 'Time', type: 'date'});\n    model.columns.push({text: 'Title'});\n    model.columns.push({text: 'Text'});\n    model.columns.push({text: 'Tags'});\n\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    for (var i = 0; i < data.length; i++) {\n      var evt = data[i];\n      model.rows.push([evt.min, evt.title, evt.text, evt.tags]);\n    }\n  }\n};\n\ntransformers.table = {\n  description: 'Table',\n  getColumns: function(data) {\n    if (!data || data.length === 0) {\n      return [];\n    }\n    if (data.length === 1) {\n      return data[0].columns;\n    } else {\n      return extractColumns(data);\n    }\n  },\n  transform: function(data, panel, model) {\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    if (data[0] === undefined || data[0].type === undefined || data[0].type !== 'table') {\n      throw new Error('Query result is not in table format, try using another transform.');\n    }\n    _.forEach(data, (dataset, index)=> dataset.grouping = panel.groupings[index]);\n    model.columns = extractColumns(data);\n    model.rows = extractRows(data, panel, model);\n  }\n};\n\ntransformers.json = {\n  description: 'JSON Data',\n  getColumns: function(data) {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    var names = {};\n    for (var i = 0; i < data.length; i++) {\n      var series = data[i];\n      if (series.type !== 'docs') {\n        continue;\n      }\n\n      // only look at 100 docs\n      var maxDocs = Math.min(series.datapoints.length, 100);\n      for (var y = 0; y < maxDocs; y++) {\n        var doc = series.datapoints[y];\n        var flattened = flatten(doc, null);\n        for (var propName in flattened) {\n          names[propName] = true;\n        }\n      }\n    }\n\n    return _.map(names, function(value, key) {\n      return {text: key, value: key};\n    });\n  },\n  transform: function(data, panel, model) {\n    var i, y, z;\n    for (i = 0; i < panel.columns.length; i++) {\n      model.columns.push({text: panel.columns[i].text});\n    }\n\n    if (model.columns.length === 0) {\n      model.columns.push({text: 'JSON'});\n    }\n\n    for (i = 0; i < data.length; i++) {\n      var series = data[i];\n\n      for (y = 0; y < series.datapoints.length; y++) {\n        var dp = series.datapoints[y];\n        var values = [];\n\n        if (_.isObject(dp) && panel.columns.length > 0) {\n          var flattened = flatten(dp, null);\n          for (z = 0; z < panel.columns.length; z++) {\n            values.push(flattened[panel.columns[z].value]);\n          }\n        } else {\n          values.push(JSON.stringify(dp));\n        }\n\n        model.rows.push(values);\n      }\n    }\n  }\n};\n\nfunction extractColumns(data) {\n  return _.flatten(data.map((group)=> group.columns));\n}\n\nfunction extractRows(data, panel, model) {\n  var rows = [],\n      mapping = {},\n      columns = panel.columns.length ? panel.columns : model.columns,\n      allHaveGrouping = _.every(data, (dataset)=> dataset.grouping);\n  \n  nameRowCells(data, model.columns);\n  \n  _.forEach(data, (dataset)=> {\n    _.forEach(dataset.namedRows, (row, rowIndex)=> {\n      var grouping = allHaveGrouping ? row[dataset.grouping] : rowIndex;\n      if (!mapping[grouping])\n        mapping[grouping] = {};\n      \n      _.assign(mapping[grouping], row);\n    });\n  });\n\n  _.forEach(_.values(mapping), (row)=> {\n    var outputRow = [];\n    if (panel.excludeUngrouped && Object.keys(row).length !== columns.length) return;\n    _.forEach(columns, (column)=> {\n      var value = row[column.text];\n      if (typeof value === 'undefined') value = null;\n      outputRow.push(value);\n    });\n    rows.push(outputRow);\n  });\n\n  \n  return rows;\n}\n\nfunction nameRowCells(data, columns) {\n  _.forEach(data, (dataset, dataIndex)=> {\n    dataset.namedRows = _.map(dataset.rows.slice(), (row)=> {\n      var output = Object.create(null);\n      _.forEach(row, (cell, cellIndex)=> {\n        var column = _.find(columns, {dataIndex, cellIndex});\n        output[column.text] = cell;\n      });\n      return output;\n    });\n  });\n}\n\nfunction transformDataToTable(data, panel) {\n  var model = new TableModel();\n\n  if (!data || data.length === 0) {\n    return model;\n  }\n\n  var transformer = transformers[panel.transform];\n  if (!transformer) {\n    throw new Error('Transformer ' + panel.transformer + ' not found');\n  }\n\n  transformer.transform(data, panel, model);\n  return model;\n}\n\nexport {transformers, transformDataToTable};\n"]}